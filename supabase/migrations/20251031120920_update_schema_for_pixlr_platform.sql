/*
  # Update Database Schema for Pixlr AI Platform

  ## Overview
  This migration updates the database structure to align with the new PRD requirements
  for the Automated Social Media & Content Ops Platform with Pixlr AI integration.

  ## 1. Changes to Existing Tables
  
  ### Update `profiles` table
  - Add `role` field mapping to user roles (creator, admin, etc.)

  ### Drop and recreate tables to match new schema
  - Remove old campaigns table
  - Update posts table to match content_posts structure
  - Update assets table for Pixlr AI integration
  - Update analytics table structure
  - Update social_accounts to platforms table

  ## 2. New Tables
  
  ### `platforms`
  - `id` (uuid, primary key) - Platform identifier
  - `user_id` (uuid) - User who connected the platform
  - `name` (text) - Platform name (TikTok, Instagram, Facebook, Lemon8)
  - `api_key` (text) - Platform API key
  - `connected` (boolean) - Connection status
  - `created_at` (timestamptz) - Connection timestamp

  ### `assets`
  - `id` (uuid, primary key) - Asset identifier
  - `user_id` (uuid) - Asset owner
  - `title` (text) - Asset title
  - `type` (text) - Asset type (image, video, text_template)
  - `url` (text) - Asset URL
  - `generated_by_ai` (boolean) - Whether generated by Pixlr AI
  - `created_at` (timestamptz) - Creation timestamp

  ### `content_posts`
  - `id` (uuid, primary key) - Post identifier
  - `user_id` (uuid) - Post creator
  - `platform_id` (uuid) - Target platform
  - `asset_id` (uuid) - Associated asset
  - `caption` (text) - Post caption
  - `scheduled_at` (timestamptz) - Scheduled time
  - `status` (text) - Post status (draft, scheduled, posted)
  - `created_at` (timestamptz) - Creation timestamp

  ### `brand_themes`
  - `id` (uuid, primary key) - Theme identifier
  - `user_id` (uuid) - Theme owner
  - `primary_color` (text) - Primary brand color
  - `secondary_color` (text) - Secondary brand color
  - `accent_color` (text) - Accent brand color
  - `font_family` (text) - Brand font
  - `created_at` (timestamptz) - Creation timestamp

  ### `analytics`
  - Updated structure for post performance tracking

  ## 3. Security
  - Enable RLS on all new tables
  - Users can only access their own data
  - Proper policies for all CRUD operations

  ## 4. Important Notes
  - All IDs use UUID instead of INTEGER for better scalability
  - Timestamps use timestamptz for timezone support
  - Maintains backward compatibility where possible
*/

-- Drop old tables that need restructuring
DROP TABLE IF EXISTS campaigns CASCADE;

-- Update profiles table to include role
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_name = 'profiles' AND column_name = 'role_type'
  ) THEN
    ALTER TABLE profiles ADD COLUMN role_type text DEFAULT 'creator';
  END IF;
END $$;

-- Create new platforms table
CREATE TABLE IF NOT EXISTS platforms (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  name text NOT NULL,
  api_key text,
  connected boolean DEFAULT false,
  created_at timestamptz DEFAULT now()
);

-- Recreate assets table with new structure
DROP TABLE IF EXISTS assets CASCADE;

CREATE TABLE IF NOT EXISTS assets (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  title text,
  type text CHECK (type IN ('image', 'video', 'text_template')),
  url text,
  generated_by_ai boolean DEFAULT false,
  created_at timestamptz DEFAULT now()
);

-- Recreate content_posts table (replaces old posts table)
DROP TABLE IF EXISTS posts CASCADE;

CREATE TABLE IF NOT EXISTS content_posts (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  platform_id uuid REFERENCES platforms(id) ON DELETE SET NULL,
  asset_id uuid REFERENCES assets(id) ON DELETE SET NULL,
  caption text,
  scheduled_at timestamptz,
  status text DEFAULT 'draft' CHECK (status IN ('draft', 'scheduled', 'posted')),
  created_at timestamptz DEFAULT now()
);

-- Create brand_themes table
CREATE TABLE IF NOT EXISTS brand_themes (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  primary_color text DEFAULT '#7C83FD',
  secondary_color text DEFAULT '#96BAFF',
  accent_color text DEFAULT '#FFC7C7',
  font_family text DEFAULT 'Inter',
  created_at timestamptz DEFAULT now()
);

-- Update analytics table structure
DROP TABLE IF EXISTS analytics CASCADE;

CREATE TABLE IF NOT EXISTS analytics (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  post_id uuid REFERENCES content_posts(id) ON DELETE CASCADE,
  platform text NOT NULL,
  reach integer DEFAULT 0,
  likes integer DEFAULT 0,
  shares integer DEFAULT 0,
  comments integer DEFAULT 0,
  fetched_at timestamptz DEFAULT now()
);

-- Drop old social_accounts table
DROP TABLE IF EXISTS social_accounts CASCADE;

-- Enable Row Level Security
ALTER TABLE platforms ENABLE ROW LEVEL SECURITY;
ALTER TABLE assets ENABLE ROW LEVEL SECURITY;
ALTER TABLE content_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE brand_themes ENABLE ROW LEVEL SECURITY;
ALTER TABLE analytics ENABLE ROW LEVEL SECURITY;

-- Platforms policies
CREATE POLICY "Users can view own platforms"
  ON platforms FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can create own platforms"
  ON platforms FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update own platforms"
  ON platforms FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid())
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can delete own platforms"
  ON platforms FOR DELETE
  TO authenticated
  USING (user_id = auth.uid());

-- Assets policies
CREATE POLICY "Users can view own assets"
  ON assets FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can create own assets"
  ON assets FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update own assets"
  ON assets FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid())
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can delete own assets"
  ON assets FOR DELETE
  TO authenticated
  USING (user_id = auth.uid());

-- Content posts policies
CREATE POLICY "Users can view own content posts"
  ON content_posts FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can create own content posts"
  ON content_posts FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update own content posts"
  ON content_posts FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid())
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can delete own content posts"
  ON content_posts FOR DELETE
  TO authenticated
  USING (user_id = auth.uid());

-- Brand themes policies
CREATE POLICY "Users can view own brand themes"
  ON brand_themes FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can create own brand themes"
  ON brand_themes FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update own brand themes"
  ON brand_themes FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid())
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can delete own brand themes"
  ON brand_themes FOR DELETE
  TO authenticated
  USING (user_id = auth.uid());

-- Analytics policies
CREATE POLICY "Users can view analytics for own posts"
  ON analytics FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM content_posts
      WHERE content_posts.id = analytics.post_id
      AND content_posts.user_id = auth.uid()
    )
  );

CREATE POLICY "System can insert analytics"
  ON analytics FOR INSERT
  TO authenticated
  WITH CHECK (true);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_platforms_user_id ON platforms(user_id);
CREATE INDEX IF NOT EXISTS idx_assets_user_id ON assets(user_id);
CREATE INDEX IF NOT EXISTS idx_content_posts_user_id ON content_posts(user_id);
CREATE INDEX IF NOT EXISTS idx_content_posts_scheduled_at ON content_posts(scheduled_at);
CREATE INDEX IF NOT EXISTS idx_content_posts_status ON content_posts(status);
CREATE INDEX IF NOT EXISTS idx_brand_themes_user_id ON brand_themes(user_id);
CREATE INDEX IF NOT EXISTS idx_analytics_post_id ON analytics(post_id);
